
fout=open("gamma.h","wt")

#adjust me! Each extra bit doubles the table size 
ditherBits=4

ditherMSB=1<<(ditherBits-1)

res="/* Dithered gamma correction table - autogenerated by gamma.py */\n#define DITHER_BITS %d\nconst unsigned char gammaTable[]={" % ditherBits

finalAdjust=0  #set this to 1 if you want your values to start at one (1..255). This is a quirky request for FastLED users only

for dither in range(1<<ditherBits):
    out=[]

    #reverse the low order bits so the dithering is less flickery
    ditherValue=0
    dread=1<<ditherBits
    dout=1
    for d in range(ditherBits):
        dread>>=1
        if dither & dread:
            ditherValue|=dout
        dout<<=1;
    
    ditherValue=(ditherValue<<(8-ditherBits))

    for n in range(256):
        #adjust for logarithmic eye response
        gamma=pow(255,(n/256.0))-1
        gamma=int(gamma*256)
        gamma+=ditherValue
        out.append( min(255, (gamma>>8)+finalAdjust) )
    if dither:
        res+=","
    res+="\n\t"+(",".join([ "0x%x"%n for n in out]))  
    
res+="\n\t};\n"

print >>fout,res
fout.close()
